# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ly5VQwktXcb3c4YyX5JTNeI6-THyS1Re
"""


def bins(df):
    import numpy as np
    import pandas as pd

    bins = pd.DataFrame({
        'fr': [1.0, 2.1,  2.9,   3.6,  4.1,  4.8,
               5.6, 6.3,  7.1,   7.9,  8.7,  9.7,
               10.7, 11.9, 13.2, 14.8, 16.5, 18.1,
               20.2, 22.5, 25.2, 28.0, 31.5, 35.3,
               39.6, 44.7, 50.0, 56.7, 64.3, 75.4],

        'to': [2.1, 2.9,   3.6,  4.1,  4.8, 5.6,
               6.3, 7.1,   7.9,  8.7,  9.7, 10.7,
               11.9, 13.2, 14.8, 16.5, 18.1, 20.2,
               22.5, 25.2, 28.0, 31.5, 35.3, 39.6,
               44.7, 50.0, 56.7, 64.3, 75.4, 2000],

        'bin': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
    })

    val = bins.loc[:, 'fr':'to'].apply(tuple, 1).tolist()
    indx = pd.IntervalIndex.from_tuples(val, closed='right')
    df['bins'] = bins.loc[indx.get_indexer(df['vodds']), 'bin'].values

    # Alternativ lösning
    # res=np.dot((df['vodds'].values[:,None] >= bins['fr'].values) &
    #           (df['vodds'].values[:,None] < bins['to'].values),
    #           bins['bin']
    # )
    # df['bins'] = res

    return df


def fix_features(df, predict=False):
    import numpy as np
    import pandas as pd

    print('fixa features start', df.shape)

    try:
        df.dropna(subset=['plac'], inplace=True)
        df.loc[df.plac == 'd', 'plac'] = 14
        df.loc[df.plac == '0', 'plac'] = 13
        df.loc[df.plac == '0:a', 'plac'] = 13
        df.loc[df.plac == '1:a', 'plac'] = '1'
        df['plac'] = df.loc[:, 'plac'].astype('float')
    except:
        print('plac finns inte i DataFrame')

    df.loc[df.start == 'AUTOSTART', 'start'] = 0
    df.loc[df.start == 'VOLTSTART', 'start'] = 1
    df['start'] = df.start.astype('int64')

    try:
        df.vodds = df['vodds'].str.replace(',', '.').astype('float')
    except:
        df.vodds = df.vodds.astype('float')

    # podds
    df.podds = df.podds.str.replace(',', '.')

    #       räkna om 'x.xx - y.yy' till ett medelvärde
    def new_podds(p):
        try:
            sp = p.split('-')
            x = sp[0]
            if len(sp) == 2:
                x = (float(sp[0]) + float(sp[1])) / 2
                return x
            else:
                return p
        except:
            # print('podds utan intervall')
            return p

    if df.podds.dtype == 'O':
        df['podds'] = df['podds'].apply(lambda x: new_podds(x))

    df.podds[df.podds.isna()] = df.vodds[df.podds.isna()]/10

    df['podds'] = df.podds.astype('float')

    #### hx_hist['plac'] ####
    # byt '' till 13
    df.loc[df.h1_plac == '', 'h1_plac'] = 13
    df.loc[df.h2_plac == '', 'h2_plac'] = 13
    df.loc[df.h3_plac == '', 'h3_plac'] = 13
    df.loc[df.h4_plac == '', 'h4_plac'] = 13
    df.loc[df.h5_plac == '', 'h5_plac'] = 13

    # byt '0' till 13
    df.loc[df.h1_plac == '0', 'h1_plac'] = 13
    df.loc[df.h2_plac == '0', 'h2_plac'] = 13
    df.loc[df.h3_plac == '0', 'h3_plac'] = 13
    df.loc[df.h4_plac == '0', 'h4_plac'] = 13
    df.loc[df.h5_plac == '0', 'h5_plac'] = 13

    # byt 'd' till 14
    df.loc[df.h1_plac == 'd', 'h1_plac'] = 14
    df.loc[df.h2_plac == 'd', 'h2_plac'] = 14
    df.loc[df.h3_plac == 'd', 'h3_plac'] = 14
    df.loc[df.h4_plac == 'd', 'h4_plac'] = 14
    df.loc[df.h5_plac == 'd', 'h5_plac'] = 14

    # ett 'r' för mycket
    df.loc[df.h1_plac == '0r', 'h1_plac'] = 13
    df.loc[df.h2_plac == '0r', 'h2_plac'] = 13
    df.loc[df.h3_plac == '0r', 'h3_plac'] = 13
    df.loc[df.h4_plac == '0r', 'h4_plac'] = 13
    df.loc[df.h5_plac == '0r', 'h5_plac'] = 13

    df.loc[df.h1_plac == '2r', 'h1_plac'] = 2
    df.loc[df.h2_plac == '2r', 'h2_plac'] = 2
    df.loc[df.h3_plac == '2r', 'h3_plac'] = 2
    df.loc[df.h4_plac == '2r', 'h4_plac'] = 2
    df.loc[df.h5_plac == '2r', 'h5_plac'] = 2

    df.loc[df.h1_plac == '3r', 'h1_plac'] = 3
    df.loc[df.h2_plac == '3r', 'h2_plac'] = 3
    df.loc[df.h3_plac == '3r', 'h3_plac'] = 3
    df.loc[df.h4_plac == '3r', 'h4_plac'] = 3
    df.loc[df.h5_plac == '3r', 'h5_plac'] = 3

    df.loc[df.h1_plac == '4r', 'h1_plac'] = 4
    df.loc[df.h2_plac == '4r', 'h2_plac'] = 4
    df.loc[df.h3_plac == '4r', 'h3_plac'] = 4
    df.loc[df.h4_plac == '4r', 'h4_plac'] = 4
    df.loc[df.h5_plac == '4r', 'h5_plac'] = 4

    # byt 'k' till 13
    df.h1_plac[df.h1_plac == 'k'] = 13
    df.h2_plac[df.h2_plac == 'k'] = 13
    df.h3_plac[df.h3_plac == 'k'] = 13
    df.h4_plac[df.h4_plac == 'k'] = 13
    df.h5_plac[df.h5_plac == 'k'] = 13

    # byt 'p' till 13
    df.h1_plac[df.h1_plac == 'p'] = 13
    df.h2_plac[df.h2_plac == 'p'] = 13
    df.h3_plac[df.h3_plac == 'p'] = 13
    df.h4_plac[df.h4_plac == 'p'] = 13
    df.h5_plac[df.h5_plac == 'p'] = 13

    # byt 'd' till 13
    df.h1_plac[df.h1_plac == 'p'] = 13
    df.h2_plac[df.h2_plac == 'p'] = 13
    df.h3_plac[df.h3_plac == 'p'] = 13
    df.h4_plac[df.h4_plac == 'p'] = 13
    df.h5_plac[df.h5_plac == 'p'] = 13

    # Ta bort alla som saknar mer än två hx_plac
    df['cnt'] = df.h1_plac.isna()*1 + df.h2_plac.isna()*1 + df.h3_plac.isna() * \
        1 + df.h4_plac.isna()*1 + df.h5_plac.isna()*1

    df = df[df.cnt <= 2]

    df.fillna({
        'h1_plac': 0,
        'h2_plac': 0,
        'h3_plac': 0,
        'h4_plac': 0,
        'h5_plac': 0}, inplace=True)

    df['h1_plac'] = df.h1_plac.astype('int')
    df['h2_plac'] = df.h2_plac.astype('int')
    df['h3_plac'] = df.h3_plac.astype('int')
    df['h4_plac'] = df.h4_plac.astype('int')
    df['h5_plac'] = df.h5_plac.astype('int')

    # compute mean valuee h1-h5 plac
    df['hx_mean'] = round((df.h1_plac+df.h2_plac+df.h3_plac +
                           df.h4_plac+df.h5_plac)/(5-df.cnt)).astype('int')
    # let dfx be all h1-h5_plac == 0 replaced with h1-h5_plac mean
    dfx = df[['h1_plac', 'h2_plac', 'h3_plac',
              'h4_plac', 'h5_plac']].replace(0, df.hx_mean)

    df[['h1_plac', 'h2_plac', 'h3_plac', 'h4_plac', 'h5_plac']] = dfx

    #### hx_odds ####

    # h1
    if df.h1_odds.dtype == 'O':
        df.h1_odds = df['h1_odds'].str.replace(',', '.')
        df.h1_odds[df.h1_odds == 'GDK'] = np.NaN
        df.h1_odds[df.h1_odds == 'gk'] = np.NaN
        df.h1_odds[df.h1_odds == 'gdk'] = np.NaN
        df.h1_odds[df.h1_odds == 'gdk1'] = np.NaN
        df.h1_odds[df.h1_odds == 'gdk2'] = np.NaN
        df.h1_odds[df.h1_odds == '1p'] = np.NaN
        df.h1_odds[df.h1_odds == 'lp'] = np.NaN
        df.h1_odds[df.h1_odds == '-'] = np.NaN
        df.h1_odds[df.h1_odds == 'ejg'] = np.NaN
        df.h1_odds[df.h1_odds == 'ejp'] = np.NaN
        df.h1_odds[df.h1_odds == 'ut'] = np.NaN
        df.h1_odds[df.h1_odds == ''] = np.NaN

    df['h1_odds'] = df.h1_odds.astype('float')

    # h2
    if df.h2_odds.dtype == 'O':
        df.h2_odds = df['h2_odds'].str.replace(',', '.')
        df.h2_odds[df.h2_odds == 'gk'] = np.NaN
        df.h2_odds[df.h2_odds == 'gdk'] = np.NaN
        df.h2_odds[df.h2_odds == 'GDK'] = np.NaN
        df.h2_odds[df.h2_odds == 'gdk1'] = np.NaN
        df.h2_odds[df.h2_odds == 'gdk2'] = np.NaN
        df.h2_odds[df.h2_odds == '1p'] = np.NaN
        df.h2_odds[df.h2_odds == 'lp'] = np.NaN
        df.h2_odds[df.h2_odds == 'ejg'] = np.NaN
        df.h2_odds[df.h2_odds == 'ejp'] = np.NaN
        df.h2_odds[df.h2_odds == 'ut'] = np.NaN
        df.h2_odds[df.h2_odds == ''] = np.NaN
        df.h2_odds[df.h2_odds == '-'] = np.NaN

    df['h2_odds'] = df.h2_odds.astype('float')

    # h3
    if df.h3_odds.dtype == 'O':
        df.h3_odds = df['h3_odds'].str.replace(',', '.')
        df.h3_odds[df.h3_odds == 'gk'] = np.NaN
        df.h3_odds[df.h3_odds == 'gdk'] = np.NaN
        df.h3_odds[df.h3_odds == 'GDK'] = np.NaN
        df.h3_odds[df.h3_odds == 'gdk1'] = np.NaN
        df.h3_odds[df.h3_odds == 'gdk21'] = np.NaN
        df.h3_odds[df.h3_odds == '1p'] = np.NaN
        df.h3_odds[df.h3_odds == 'lp'] = np.NaN
        df.h3_odds[df.h3_odds == 'b-lp'] = np.NaN
        df.h3_odds[df.h3_odds == 'ejg'] = np.NaN
        df.h3_odds[df.h3_odds == 'ejp'] = np.NaN
        df.h3_odds[df.h3_odds == 'ut'] = np.NaN
        df.h3_odds[df.h3_odds == '-'] = np.NaN
        df.h3_odds[df.h3_odds == ''] = np.NaN

    df['h3_odds'] = df.h3_odds.astype('float')

    # h4
    if df.h4_odds.dtype == 'O':
        df.h4_odds = df['h4_odds'].str.replace(',', '.')
        df.h4_odds[df.h4_odds == 'gk'] = np.NaN
        df.h4_odds[df.h4_odds == 'gdk'] = np.NaN
        df.h4_odds[df.h4_odds == 'GDK'] = np.NaN
        df.h4_odds[df.h4_odds == 'gdk1'] = np.NaN
        df.h4_odds[df.h4_odds == 'gdk2'] = np.NaN
        df.h4_odds[df.h4_odds == 'b-lp'] = np.NaN
        df.h4_odds[df.h4_odds == 'ejg'] = np.NaN
        df.h4_odds[df.h4_odds == 'ejp'] = np.NaN
        df.h4_odds[df.h4_odds == 'ut'] = np.NaN
        df.h4_odds[df.h4_odds == '1p'] = np.NaN
        df.h4_odds[df.h4_odds == 'lp'] = np.NaN
        df.h4_odds[df.h4_odds == '-'] = np.NaN
        df.h4_odds[df.h4_odds == ''] = np.NaN

    df['h4_odds'] = df.h4_odds.astype('float')

    # h5
    if df.h5_odds.dtype == 'O':
        df.h5_odds = df['h5_odds'].str.replace(',', '.')
        df.h5_odds[df.h5_odds == 'gdk'] = np.NaN
        df.h5_odds[df.h5_odds == 'gk'] = np.NaN
        df.h5_odds[df.h5_odds == 'GDK'] = np.NaN
        df.h5_odds[df.h5_odds == 'gdk1'] = np.NaN
        df.h5_odds[df.h5_odds == 'gdk2'] = np.NaN
        df.h5_odds[df.h5_odds == 'gdk3'] = np.NaN
        df.h5_odds[df.h5_odds == '-'] = np.NaN
        df.h5_odds[df.h5_odds == 'lp'] = np.NaN
        df.h5_odds[df.h5_odds == '1p'] = np.NaN
        df.h5_odds[df.h5_odds == 'b-lp'] = np.NaN
        df.h5_odds[df.h5_odds == 'B-lp'] = np.NaN
        df.h5_odds[df.h5_odds == 'ejg'] = np.NaN
        df.h5_odds[df.h5_odds == 'ejp'] = np.NaN
        df.h5_odds[df.h5_odds == 'ut'] = np.NaN
        df.h5_odds[df.h5_odds == 'p'] = np.NaN
        df.h5_odds[df.h5_odds == 'P'] = np.NaN
        df.h5_odds[df.h5_odds == ''] = np.NaN

    df['h5_odds'] = df.h5_odds.astype('float')

    # Ta bort alla som saknar mer än två hx_odds
    df['cnt'] = df.h1_odds.isna()*1 + df.h2_odds.isna()*1 + df.h3_odds.isna() * \
        1 + df.h4_odds.isna()*1 + df.h5_odds.isna()*1
    df = df[df.cnt <= 2]

    df.fillna({
        'h1_odds': 0,
        'h2_odds': 0,
        'h3_odds': 0,
        'h4_odds': 0,
        'h5_odds': 0}, inplace=True)

    # compute mean valuee h1-h5 odds
    df['hx_mean'] = (df.h1_odds+df.h2_odds+df.h3_odds +
                     df.h4_odds+df.h5_odds)/(5-df.cnt)
    # let dfx be all h1-h5_odds == 0 replaced with h1-h5_odds mean
    dfx = df[['h1_odds', 'h2_odds', 'h3_odds',
              'h4_odds', 'h5_odds']].replace(0, df.hx_mean)

    df[['h1_odds', 'h2_odds', 'h3_odds', 'h4_odds', 'h5_odds']] = dfx

    # remove temp columns
    df.drop(['cnt', 'hx_mean'], axis=1, inplace=True)

    # h1-h5_dist==NaN sätts till dist
    df.h1_dist[df.h1_dist.isna()] = df.dist
    df.h2_dist[df.h2_dist.isna()] = df.dist
    df.h3_dist[df.h3_dist.isna()] = df.dist
    df.h4_dist[df.h4_dist.isna()] = df.dist
    df.h5_dist[df.h5_dist.isna()] = df.dist

    # spår NaN sätts till 0
    df.spår[df.spår.isna()] = 0
    df.h1_spår[df.h1_spår.isna()] = 0
    df.h2_spår[df.h2_spår.isna()] = 0
    df.h3_spår[df.h3_spår.isna()] = 0
    df.h4_spår[df.h4_spår.isna()] = 0
    df.h5_spår[df.h5_spår.isna()] = 0

    # spår '' sätts till 0
    df.spår[df.spår == ''] = 0
    df.loc[df.h1_spår == '', 'h1_spår'] = 0
    df.loc[df.h2_spår == '', 'h2_spår'] = 0
    df.loc[df.h3_spår == '', 'h3_spår'] = 0
    df.loc[df.h4_spår == '', 'h4_spår'] = 0
    df.loc[df.h5_spår == '', 'h5_spår'] = 0

    df.spår = df.spår.astype('int')
    df.h1_spår = df.h1_spår.astype('int')
    df.h2_spår = df.h2_spår.astype('int')
    df.h3_spår = df.h3_spår.astype('int')
    df.h4_spår = df.h4_spår.astype('int')
    df.h5_spår = df.h5_spår.astype('int')

    # df.dropna(inplace=True)

    df['dist'] = df.dist.astype('int')
    df['h1_dist'] = df.h1_dist.astype('int')
    df['h2_dist'] = df.h2_dist.astype('int')
    df['h3_dist'] = df.h3_dist.astype('int')
    df['h4_dist'] = df.h4_dist.astype('int')
    df['h5_dist'] = df.h5_dist.astype('int')

    # Remove outliers vodds < 90
    df = df[(df.vodds < 90) & (df.h1_odds < 90) & (df.h2_odds < 90) & (
        df.h3_odds < 90) & (df.h4_odds < 90) & (df.h5_odds < 90)]

    # remove outliers dist > 1000
    df = df[(df.dist > 1000) & (df.h1_dist > 1000) & (df.h2_dist > 1000) & (
        df.h3_dist > 1000) & (df.h4_dist > 1000) & (df.h5_dist > 1000)]

    return bins(df)
